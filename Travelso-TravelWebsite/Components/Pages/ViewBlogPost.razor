@page "/ViewBlogPost/{BlogPostId:int}"
@inject BlogPostService BlogPostService
@inject CommentService CommentService
@inject UserService UserService
@inject CountryService CountryService
@using Azure.Identity
@using Travelso_TravelWebsite.Services
@using Travelso_Website_Shared.DTOs.UserDTOs
@using Travelso_Website_Shared.Entities
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="loading">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="BlogpostContainer">

        <div class="row row2" style="justify-content:center">
            <div class="col-md-9 ViewPostDiv">

                <img src="@Post.ImageUrl" class="img-fluid" alt="Blogpost Image"/>

                <div class="d-flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                        <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
                    </svg>
                    <p>@CountryName.Name</p>
                </div>

                <div>
                    <br/>
                    @((MarkupString)Post.HtmlContent)
                    <p>Publication date @Post.PublishedDate</p>
                </div>
                <br/>


                <div class="d-flex align-items-center justify-content-center mb-3">
                    <img src="@(!string.IsNullOrEmpty(BlogPostAuthorUser.ProfileImage) ? BlogPostAuthorUser.ProfileImage : DefaultUserImageUrl)" 
                         class="rounded-circle mr-3" 
                         style="width: 70px; height: 70px;" 
                         alt="BlogPostAuthorUser Profile Image"/>
                    <span style="font-size: 20px;">@BlogPostAuthorUser.Email</span>
                </div>

                <hr/> 

                <div class="CommentSection justify-content-center">
                    <h3>Let the author know what you think!</h3>

                    <div class="mt-3 col-md-6">
                        <div class="list-group">
                            <Virtualize Items="Comments">
                                <ItemContent Context="comment">
                                    <div class="list-group-item d-flex align-items-center">
                                        <img src="@(!string.IsNullOrEmpty(comment.userImageURL) ? comment.userImageURL : DefaultUserImageUrl)" 
                                             class="rounded-circle mr-3" 
                                             style="width: 40px; height: 40px; margin: 10px;" 
                                             alt="Commenter Profile Image"/>
                                        <div>
                                            <p class="card-text">@comment.comment</p>
                                            <p class="card-footer">@comment.publicationDate </p>
                                        </div>
                                    </div>
                                </ItemContent>
                            </Virtualize>
                        </div>
                    </div>


                    <form class="col-md-6">
                        <div class="form-group">
                            <label for="commentName">Name:</label>
                            <input @bind="UserNotLoggedIn" type="text" class="form-control" id="commentName">
                        </div>
                        <div class="form-group">
                            <label for="commentContent">Comment:</label>
                            <textarea @bind="NewCommentText" class="form-control" id="commentContent" rows="3"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary" @onclick="(() => AddNewComment())">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}



@code {

    [Parameter]
    public int BlogPostId { get; set; }
    private bool isLoading = true;

    Country CountryName;
    string UserNotLoggedIn;
    string NewCommentText;
    string DefaultUserImageUrl = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png";


    public BlogPost Post = new BlogPost();
    public List<UserCommentDTO>? Comments { get; set; } = new List<UserCommentDTO>();
    TravelsoUser BlogPostAuthorUser = new TravelsoUser();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the right blog post
            var postById = await BlogPostService.GetById(BlogPostId);
            if (postById is null)
            {
                return;
            }

            Post = postById;
            BlogPostAuthorUser = await UserService.GetUserWithId(Post.TravelsoUser);

            // Get comments for the blog post
            var list = await CommentService.CommentsByBlogPost(Post.BlogPostId);
            Comments = list.ToList();

            //get country by id
            CountryName = await CountryService.GetById(Post.CountryId);

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
        finally
        {
            isLoading = false; 
        }

        await base.OnInitializedAsync();
    }

    public async Task AddNewComment()
    {
        Comment newComment = new Comment()
        {
            comment = NewCommentText,
            TravelsoUser = UserNotLoggedIn,
            BlogPostId = Post.BlogPostId,
            publicationDate = DateTime.Now
        };
        await CommentService.Add(newComment);
    }
}