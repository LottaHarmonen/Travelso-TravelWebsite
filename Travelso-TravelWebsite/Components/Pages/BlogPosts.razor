@page "/BlogPosts"
@inject DestinationService DestinationService
@inject BlogPostService BlogPostService
@inject CountryService CountryService
@rendermode InteractiveServer
@using Travelso_Website_Shared.Entities
@using Travelso_TravelWebsite.Services




<div class="BlogpostContainer">
    <div class="containerFilterCard">
        <div class="filter">
            <h3>Filter posts</h3>
            <hr />
            <select class="form-control" @bind="SelectedCountry">
                <option value="">Select a country</option>
                @foreach (var country in AllCountries)
                {
                    <option value="@country.CountryId">@country.Name</option>
                }
            </select>
            <select>
                <option value="">Sort</option>
                <option value="option1">Newest to oldest</option>
                <option value="option2">Most popular</option>
            </select>
            <button style="margin: 20px" type="button" class="btn btn-info">Search</button>
            <button type="button" class="btn btn-info">Surprise me</button>
        </div>
        <div class="cards-container">
            <div class="row">
                <Virtualize Items="FilteredPosts">
                    <div class="col-md-4 mb-3">
                        <a href="@($"ViewBlogPost/{context.BlogPostId}")" style="text-decoration: none; color: inherit;">
                            <div class="card">
                                <img src="@context.ImageUrl" class="card-img-top" alt="Blog Post Image" />
                                <div class="card-body">
                                    <h5 class="card-title">@context.Title</h5>
                                    <p class="card-text">Published on: @context.PublishedDate.ToShortDateString()</p>
                                </div>
                            </div>
                        </a>
                    </div>
                </Virtualize>
            </div>
        </div>
    </div>
</div>

@code {
    private int _selectedCountry;
    private List<BlogPost> _allPosts = new();

    public int SelectedCountry
    {
        get => _selectedCountry;
        set
        {
            if (_selectedCountry != value)
            {
                _selectedCountry = value;
                OnSelectedCountryChanged();
            }
        }
    }

    public List<BlogPost> FilteredPosts { get; set; } = new();
    public List<Country> AllCountries { get; set; } = new();

    private async Task OnSelectedCountryChanged()
    {
        if (_selectedCountry == 0)
        {
            FilteredPosts = _allPosts.ToList();
        }
        else
        {
            FilteredPosts = _allPosts.Where(b => b.CountryId == _selectedCountry).ToList();
        }

        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        _allPosts = ((await BlogPostService.GetAll())!).ToList();
        AllCountries = (await CountryService.GetAll()).ToList();

        FilteredPosts = _allPosts.ToList();
        StateHasChanged();
    }
}


